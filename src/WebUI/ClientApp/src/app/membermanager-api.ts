/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAdminClient {
    getCurrentAdmins(): Observable<string[]>;
    addAdmin(command: AddAdminUserCommand): Observable<FileResponse>;
    removeAdmin(command: RemoveAdminUserCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AdminClient implements IAdminClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCurrentAdmins(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Admin";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentAdmins(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentAdmins(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentAdmins(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    addAdmin(command: AddAdminUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Admin/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAdmin(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddAdmin(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    removeAdmin(command: RemoveAdminUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Admin/Remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveAdmin(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveAdmin(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ICareerLevelClient {
    get(): Observable<CareerLevelsVm>;
    create(command: CreateCareerLevelCommand): Observable<number>;
    get2(id: number): Observable<CareerLevelDto>;
    update(id: number, command: UpdateCareerLevelCommand): Observable<FileResponse>;
    getHistory(id: number): Observable<CareerLevelHistoryVm>;
    changePersonCareerLevel(command: ChangePersonCareerLevelCommand): Observable<number>;
    removePersonCareerLevelChange(personCareerLevelId: number): Observable<FileResponse>;
    reactivate(id: number): Observable<FileResponse>;
    deactivate(id: number, command: DeactivateCareerLevelCommand): Observable<FileResponse>;
    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions>;
}

@Injectable({
    providedIn: 'root'
})
export class CareerLevelClient implements ICareerLevelClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<CareerLevelsVm> {
        let url_ = this.baseUrl + "/api/CareerLevel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CareerLevelsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CareerLevelsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CareerLevelsVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CareerLevelsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CareerLevelsVm>(<any>null);
    }

    create(command: CreateCareerLevelCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/CareerLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get2(id: number): Observable<CareerLevelDto> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<CareerLevelDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CareerLevelDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<CareerLevelDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CareerLevelDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CareerLevelDto>(<any>null);
    }

    update(id: number, command: UpdateCareerLevelCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getHistory(id: number): Observable<CareerLevelHistoryVm> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}/GetHistory";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHistory(<any>response_);
                } catch (e) {
                    return <Observable<CareerLevelHistoryVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CareerLevelHistoryVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetHistory(response: HttpResponseBase): Observable<CareerLevelHistoryVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CareerLevelHistoryVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CareerLevelHistoryVm>(<any>null);
    }

    changePersonCareerLevel(command: ChangePersonCareerLevelCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/CareerLevel/ChangePersonCareerLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePersonCareerLevel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePersonCareerLevel(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processChangePersonCareerLevel(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    removePersonCareerLevelChange(personCareerLevelId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CareerLevel/RemovePersonCareerLevelChange/{PersonCareerLevelId}";
        if (personCareerLevelId === undefined || personCareerLevelId === null)
            throw new Error("The parameter 'personCareerLevelId' must be defined.");
        url_ = url_.replace("{PersonCareerLevelId}", encodeURIComponent("" + personCareerLevelId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemovePersonCareerLevelChange(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovePersonCareerLevelChange(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRemovePersonCareerLevelChange(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    reactivate(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}/Reactivate";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReactivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReactivate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processReactivate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    deactivate(id: number, command: DeactivateCareerLevelCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}/Deactivate";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeactivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeactivate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeactivate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions> {
        let url_ = this.baseUrl + "/api/CareerLevel/{id}/GetAssignSuggestions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssignSuggestions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssignSuggestions(<any>response_);
                } catch (e) {
                    return <Observable<PeopleAssignSuggestions>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleAssignSuggestions>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssignSuggestions(response: HttpResponseBase): Observable<PeopleAssignSuggestions> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleAssignSuggestions.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleAssignSuggestions>(<any>null);
    }
}

export interface IMemberStatusClient {
    get(): Observable<MemberStatusVm>;
    create(createCommand: CreateMemberStatusCommand): Observable<number>;
    get2(id: number): Observable<MemberStatusDetailVm>;
    update(id: number, updateCommand: UpdateMemberStatusCommand): Observable<FileResponse>;
    getHistory(id: number): Observable<MemberStatusHistoryVm>;
    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions2>;
    getDismissSuggestions(id: number): Observable<PeopleDismissSuggestions>;
    assign(id: number, command: AssignToMemberStatusCommand): Observable<FileResponse>;
    dismiss(id: number, command: DismissFromMemberStatusCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class MemberStatusClient implements IMemberStatusClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<MemberStatusVm> {
        let url_ = this.baseUrl + "/api/MemberStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<MemberStatusVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<MemberStatusVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MemberStatusVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MemberStatusVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MemberStatusVm>(<any>null);
    }

    create(createCommand: CreateMemberStatusCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/MemberStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get2(id: number): Observable<MemberStatusDetailVm> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<MemberStatusDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<MemberStatusDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<MemberStatusDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MemberStatusDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MemberStatusDetailVm>(<any>null);
    }

    update(id: number, updateCommand: UpdateMemberStatusCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getHistory(id: number): Observable<MemberStatusHistoryVm> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}/GetHistory";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHistory(<any>response_);
                } catch (e) {
                    return <Observable<MemberStatusHistoryVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<MemberStatusHistoryVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetHistory(response: HttpResponseBase): Observable<MemberStatusHistoryVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MemberStatusHistoryVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MemberStatusHistoryVm>(<any>null);
    }

    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions2> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}/GetAssignSuggestions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssignSuggestions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssignSuggestions(<any>response_);
                } catch (e) {
                    return <Observable<PeopleAssignSuggestions2>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleAssignSuggestions2>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssignSuggestions(response: HttpResponseBase): Observable<PeopleAssignSuggestions2> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleAssignSuggestions2.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleAssignSuggestions2>(<any>null);
    }

    getDismissSuggestions(id: number): Observable<PeopleDismissSuggestions> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}/GetDismissSuggestions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDismissSuggestions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDismissSuggestions(<any>response_);
                } catch (e) {
                    return <Observable<PeopleDismissSuggestions>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleDismissSuggestions>><any>_observableThrow(response_);
        }));
    }

    protected processGetDismissSuggestions(response: HttpResponseBase): Observable<PeopleDismissSuggestions> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleDismissSuggestions.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleDismissSuggestions>(<any>null);
    }

    assign(id: number, command: AssignToMemberStatusCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}/Assign";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssign(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAssign(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    dismiss(id: number, command: DismissFromMemberStatusCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MemberStatus/{id}/Dismiss";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDismiss(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDismiss(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDismiss(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IPeopleClient {
    get(): Observable<PeopleVm>;
    create(command: CreatePersonCommand): Observable<number>;
    getWithBasicInfo(): Observable<PeopleWithBasicInfoVm>;
    getCurrentCareerLevel(id: number, time: Date | null | undefined): Observable<CareerLevelAssignmentDto>;
    get2(id: number): Observable<PersonDetailVm>;
    update(id: number, command: UpdatePersonCommand): Observable<FileResponse>;
    delete(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class PeopleClient implements IPeopleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<PeopleVm> {
        let url_ = this.baseUrl + "/api/People";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<PeopleVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PeopleVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleVm>(<any>null);
    }

    create(command: CreatePersonCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/People";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getWithBasicInfo(): Observable<PeopleWithBasicInfoVm> {
        let url_ = this.baseUrl + "/api/People/GetWithBasicInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWithBasicInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWithBasicInfo(<any>response_);
                } catch (e) {
                    return <Observable<PeopleWithBasicInfoVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleWithBasicInfoVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetWithBasicInfo(response: HttpResponseBase): Observable<PeopleWithBasicInfoVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleWithBasicInfoVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleWithBasicInfoVm>(<any>null);
    }

    getCurrentCareerLevel(id: number, time: Date | null | undefined): Observable<CareerLevelAssignmentDto> {
        let url_ = this.baseUrl + "/api/People/{id}/GetCurrentCareerLevel?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (time !== undefined)
            url_ += "time=" + encodeURIComponent(time ? "" + time.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentCareerLevel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentCareerLevel(<any>response_);
                } catch (e) {
                    return <Observable<CareerLevelAssignmentDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CareerLevelAssignmentDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentCareerLevel(response: HttpResponseBase): Observable<CareerLevelAssignmentDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CareerLevelAssignmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CareerLevelAssignmentDto>(<any>null);
    }

    get2(id: number): Observable<PersonDetailVm> {
        let url_ = this.baseUrl + "/api/People/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<PersonDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PersonDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<PersonDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PersonDetailVm>(<any>null);
    }

    update(id: number, command: UpdatePersonCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/People/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/People/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IPositionClient {
    get(): Observable<PositionsVm>;
    create(command: CreatePositionCommand): Observable<number>;
    get2(id: number, history: boolean | undefined): Observable<PositionDto>;
    update(id: number, command: UpdatePositionCommand): Observable<FileResponse>;
    getWithAssignees(history: boolean | undefined): Observable<PositionsWAVm>;
    getHistory(id: number): Observable<PositionsHistoryVm>;
    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions3>;
    getDismissSuggestions(id: number): Observable<PeopleDismissSuggestions2>;
    deactivate(id: number, command: DeactivatePositionCommand): Observable<FileResponse>;
    reactivate(id: number, command: ReactivatePositionCommand): Observable<FileResponse>;
    assign(id: number, command: AssignToPositionCommand): Observable<FileResponse>;
    dismiss(id: number, command: DismissFromPositionCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class PositionClient implements IPositionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<PositionsVm> {
        let url_ = this.baseUrl + "/api/Position";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<PositionsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PositionsVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionsVm>(<any>null);
    }

    create(command: CreatePositionCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Position";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get2(id: number, history: boolean | undefined): Observable<PositionDto> {
        let url_ = this.baseUrl + "/api/Position/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (history === null)
            throw new Error("The parameter 'history' cannot be null.");
        else if (history !== undefined)
            url_ += "history=" + encodeURIComponent("" + history) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<PositionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<PositionDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionDto>(<any>null);
    }

    update(id: number, command: UpdatePositionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Position/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getWithAssignees(history: boolean | undefined): Observable<PositionsWAVm> {
        let url_ = this.baseUrl + "/api/Position/GetWithAssignees?";
        if (history === null)
            throw new Error("The parameter 'history' cannot be null.");
        else if (history !== undefined)
            url_ += "history=" + encodeURIComponent("" + history) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWithAssignees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWithAssignees(<any>response_);
                } catch (e) {
                    return <Observable<PositionsWAVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionsWAVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetWithAssignees(response: HttpResponseBase): Observable<PositionsWAVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionsWAVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionsWAVm>(<any>null);
    }

    getHistory(id: number): Observable<PositionsHistoryVm> {
        let url_ = this.baseUrl + "/api/Position/{id}/GetHistory";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHistory(<any>response_);
                } catch (e) {
                    return <Observable<PositionsHistoryVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PositionsHistoryVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetHistory(response: HttpResponseBase): Observable<PositionsHistoryVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionsHistoryVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PositionsHistoryVm>(<any>null);
    }

    getAssignSuggestions(id: number): Observable<PeopleAssignSuggestions3> {
        let url_ = this.baseUrl + "/api/Position/{id}/GetAssignSuggestions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssignSuggestions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssignSuggestions(<any>response_);
                } catch (e) {
                    return <Observable<PeopleAssignSuggestions3>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleAssignSuggestions3>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssignSuggestions(response: HttpResponseBase): Observable<PeopleAssignSuggestions3> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleAssignSuggestions3.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleAssignSuggestions3>(<any>null);
    }

    getDismissSuggestions(id: number): Observable<PeopleDismissSuggestions2> {
        let url_ = this.baseUrl + "/api/Position/{id}/GetDismissSuggestions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDismissSuggestions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDismissSuggestions(<any>response_);
                } catch (e) {
                    return <Observable<PeopleDismissSuggestions2>><any>_observableThrow(e);
                }
            } else
                return <Observable<PeopleDismissSuggestions2>><any>_observableThrow(response_);
        }));
    }

    protected processGetDismissSuggestions(response: HttpResponseBase): Observable<PeopleDismissSuggestions2> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PeopleDismissSuggestions2.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PeopleDismissSuggestions2>(<any>null);
    }

    deactivate(id: number, command: DeactivatePositionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Position/{id}/Deactivate";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeactivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeactivate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeactivate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    reactivate(id: number, command: ReactivatePositionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Position/{id}/Reactivate";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReactivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReactivate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processReactivate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    assign(id: number, command: AssignToPositionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Position/{id}/Assign";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssign(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAssign(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    dismiss(id: number, command: DismissFromPositionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Position/{id}/Dismiss";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDismiss(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDismiss(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDismiss(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class AddAdminUserCommand implements IAddAdminUserCommand {
    email?: string | undefined;

    constructor(data?: IAddAdminUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): AddAdminUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddAdminUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IAddAdminUserCommand {
    email?: string | undefined;
}

export class RemoveAdminUserCommand implements IRemoveAdminUserCommand {
    email?: string | undefined;

    constructor(data?: IRemoveAdminUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): RemoveAdminUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveAdminUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IRemoveAdminUserCommand {
    email?: string | undefined;
}

export class CareerLevelsVm implements ICareerLevelsVm {
    careerLevels?: CareerLevelLookupDto[] | undefined;

    constructor(data?: ICareerLevelsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["careerLevels"])) {
                this.careerLevels = [] as any;
                for (let item of _data["careerLevels"])
                    this.careerLevels!.push(CareerLevelLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CareerLevelsVm {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.careerLevels)) {
            data["careerLevels"] = [];
            for (let item of this.careerLevels)
                data["careerLevels"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICareerLevelsVm {
    careerLevels?: CareerLevelLookupDto[] | undefined;
}

export class CareerLevelLookupDto implements ICareerLevelLookupDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    countAssignees?: number;

    constructor(data?: ICareerLevelLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.isActive = _data["isActive"];
            this.countAssignees = _data["countAssignees"];
        }
    }

    static fromJS(data: any): CareerLevelLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        data["countAssignees"] = this.countAssignees;
        return data; 
    }
}

export interface ICareerLevelLookupDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    countAssignees?: number;
}

export class CareerLevelDto implements ICareerLevelDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    assignees?: CareerLevelAssignee[] | undefined;

    constructor(data?: ICareerLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(CareerLevelAssignee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CareerLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICareerLevelDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    assignees?: CareerLevelAssignee[] | undefined;
}

export class CareerLevelAssignee implements ICareerLevelAssignee {
    id?: number;
    personId?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: ICareerLevelAssignee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.personId = _data["personId"];
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CareerLevelAssignee {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelAssignee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["personId"] = this.personId;
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICareerLevelAssignee {
    id?: number;
    personId?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class CreateCareerLevelCommand implements ICreateCareerLevelCommand {
    name?: string | undefined;
    shortName?: string | undefined;

    constructor(data?: ICreateCareerLevelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
        }
    }

    static fromJS(data: any): CreateCareerLevelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCareerLevelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface ICreateCareerLevelCommand {
    name?: string | undefined;
    shortName?: string | undefined;
}

export class UpdateCareerLevelCommand implements IUpdateCareerLevelCommand {
    careerLevelId?: number;
    name?: string | undefined;
    shortName?: string | undefined;

    constructor(data?: IUpdateCareerLevelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.careerLevelId = _data["careerLevelId"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
        }
    }

    static fromJS(data: any): UpdateCareerLevelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCareerLevelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["careerLevelId"] = this.careerLevelId;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface IUpdateCareerLevelCommand {
    careerLevelId?: number;
    name?: string | undefined;
    shortName?: string | undefined;
}

export class CareerLevelHistoryVm implements ICareerLevelHistoryVm {
    assignees?: CareerLevelAssignee[] | undefined;

    constructor(data?: ICareerLevelHistoryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(CareerLevelAssignee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CareerLevelHistoryVm {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelHistoryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICareerLevelHistoryVm {
    assignees?: CareerLevelAssignee[] | undefined;
}

export class ChangePersonCareerLevelCommand implements IChangePersonCareerLevelCommand {
    careerLevelId?: number;
    personId?: number;
    changeDateTime?: Date;

    constructor(data?: IChangePersonCareerLevelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.careerLevelId = _data["careerLevelId"];
            this.personId = _data["personId"];
            this.changeDateTime = _data["changeDateTime"] ? new Date(_data["changeDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ChangePersonCareerLevelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePersonCareerLevelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["careerLevelId"] = this.careerLevelId;
        data["personId"] = this.personId;
        data["changeDateTime"] = this.changeDateTime ? this.changeDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IChangePersonCareerLevelCommand {
    careerLevelId?: number;
    personId?: number;
    changeDateTime?: Date;
}

export class DeactivateCareerLevelCommand implements IDeactivateCareerLevelCommand {
    careerLevelId?: number;
    newCareerLevelId?: number;
    changeDateTime?: Date;

    constructor(data?: IDeactivateCareerLevelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.careerLevelId = _data["careerLevelId"];
            this.newCareerLevelId = _data["newCareerLevelId"];
            this.changeDateTime = _data["changeDateTime"] ? new Date(_data["changeDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeactivateCareerLevelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivateCareerLevelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["careerLevelId"] = this.careerLevelId;
        data["newCareerLevelId"] = this.newCareerLevelId;
        data["changeDateTime"] = this.changeDateTime ? this.changeDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDeactivateCareerLevelCommand {
    careerLevelId?: number;
    newCareerLevelId?: number;
    changeDateTime?: Date;
}

export class PeopleAssignSuggestions implements IPeopleAssignSuggestions {
    suggestions?: PeopleAssignSuggestion[] | undefined;

    constructor(data?: IPeopleAssignSuggestions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of _data["suggestions"])
                    this.suggestions!.push(PeopleAssignSuggestion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleAssignSuggestions {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleAssignSuggestions {
    suggestions?: PeopleAssignSuggestion[] | undefined;
}

export class PeopleAssignSuggestion implements IPeopleAssignSuggestion {
    name?: string | undefined;
    id?: number;

    constructor(data?: IPeopleAssignSuggestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PeopleAssignSuggestion {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPeopleAssignSuggestion {
    name?: string | undefined;
    id?: number;
}

export class MemberStatusVm implements IMemberStatusVm {
    memberStatus?: MemberStatusLookupDto[] | undefined;

    constructor(data?: IMemberStatusVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["memberStatus"])) {
                this.memberStatus = [] as any;
                for (let item of _data["memberStatus"])
                    this.memberStatus!.push(MemberStatusLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MemberStatusVm {
        data = typeof data === 'object' ? data : {};
        let result = new MemberStatusVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.memberStatus)) {
            data["memberStatus"] = [];
            for (let item of this.memberStatus)
                data["memberStatus"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMemberStatusVm {
    memberStatus?: MemberStatusLookupDto[] | undefined;
}

export class MemberStatusLookupDto implements IMemberStatusLookupDto {
    id?: number;
    name?: string | undefined;
    countAssignees?: number;

    constructor(data?: IMemberStatusLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.countAssignees = _data["countAssignees"];
        }
    }

    static fromJS(data: any): MemberStatusLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new MemberStatusLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["countAssignees"] = this.countAssignees;
        return data; 
    }
}

export interface IMemberStatusLookupDto {
    id?: number;
    name?: string | undefined;
    countAssignees?: number;
}

export class CreateMemberStatusCommand implements ICreateMemberStatusCommand {
    name?: string | undefined;

    constructor(data?: ICreateMemberStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateMemberStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMemberStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateMemberStatusCommand {
    name?: string | undefined;
}

export class MemberStatusDetailVm implements IMemberStatusDetailVm {
    id?: number;
    name?: string | undefined;
    countAssignees?: number;
    assignees?: AssigneeDto[] | undefined;

    constructor(data?: IMemberStatusDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.countAssignees = _data["countAssignees"];
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(AssigneeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MemberStatusDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new MemberStatusDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["countAssignees"] = this.countAssignees;
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMemberStatusDetailVm {
    id?: number;
    name?: string | undefined;
    countAssignees?: number;
    assignees?: AssigneeDto[] | undefined;
}

export class AssigneeDto implements IAssigneeDto {
    personId?: number;
    name?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: IAssigneeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            this.name = _data["name"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssigneeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssigneeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["name"] = this.name;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAssigneeDto {
    personId?: number;
    name?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class UpdateMemberStatusCommand implements IUpdateMemberStatusCommand {
    memberStatusId?: number;
    name?: string | undefined;

    constructor(data?: IUpdateMemberStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberStatusId = _data["memberStatusId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateMemberStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMemberStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberStatusId"] = this.memberStatusId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUpdateMemberStatusCommand {
    memberStatusId?: number;
    name?: string | undefined;
}

export class MemberStatusHistoryVm implements IMemberStatusHistoryVm {
    id?: number;
    name?: string | undefined;
    assignees?: AssigneeDto[] | undefined;

    constructor(data?: IMemberStatusHistoryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(AssigneeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MemberStatusHistoryVm {
        data = typeof data === 'object' ? data : {};
        let result = new MemberStatusHistoryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMemberStatusHistoryVm {
    id?: number;
    name?: string | undefined;
    assignees?: AssigneeDto[] | undefined;
}

export class PeopleAssignSuggestions2 implements IPeopleAssignSuggestions2 {
    suggestions?: PeopleAssignSuggestion2[] | undefined;

    constructor(data?: IPeopleAssignSuggestions2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of _data["suggestions"])
                    this.suggestions!.push(PeopleAssignSuggestion2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleAssignSuggestions2 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestions2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleAssignSuggestions2 {
    suggestions?: PeopleAssignSuggestion2[] | undefined;
}

export class PeopleAssignSuggestion2 implements IPeopleAssignSuggestion2 {
    name?: string | undefined;
    id?: number;

    constructor(data?: IPeopleAssignSuggestion2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PeopleAssignSuggestion2 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestion2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPeopleAssignSuggestion2 {
    name?: string | undefined;
    id?: number;
}

export class PeopleDismissSuggestions implements IPeopleDismissSuggestions {
    suggestions?: PeopleDismissSuggestion[] | undefined;

    constructor(data?: IPeopleDismissSuggestions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of _data["suggestions"])
                    this.suggestions!.push(PeopleDismissSuggestion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleDismissSuggestions {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleDismissSuggestions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleDismissSuggestions {
    suggestions?: PeopleDismissSuggestion[] | undefined;
}

export class PeopleDismissSuggestion implements IPeopleDismissSuggestion {
    id?: number;
    name?: string | undefined;

    constructor(data?: IPeopleDismissSuggestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PeopleDismissSuggestion {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleDismissSuggestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPeopleDismissSuggestion {
    id?: number;
    name?: string | undefined;
}

export class AssignToMemberStatusCommand implements IAssignToMemberStatusCommand {
    memberStatusId?: number;
    personId?: number;
    assignmentDateTime?: Date;
    dismissalDateTime?: Date | undefined;

    constructor(data?: IAssignToMemberStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberStatusId = _data["memberStatusId"];
            this.personId = _data["personId"];
            this.assignmentDateTime = _data["assignmentDateTime"] ? new Date(_data["assignmentDateTime"].toString()) : <any>undefined;
            this.dismissalDateTime = _data["dismissalDateTime"] ? new Date(_data["dismissalDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssignToMemberStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AssignToMemberStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberStatusId"] = this.memberStatusId;
        data["personId"] = this.personId;
        data["assignmentDateTime"] = this.assignmentDateTime ? this.assignmentDateTime.toISOString() : <any>undefined;
        data["dismissalDateTime"] = this.dismissalDateTime ? this.dismissalDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAssignToMemberStatusCommand {
    memberStatusId?: number;
    personId?: number;
    assignmentDateTime?: Date;
    dismissalDateTime?: Date | undefined;
}

export class DismissFromMemberStatusCommand implements IDismissFromMemberStatusCommand {
    memberStatusId?: number;
    personId?: number;
    dismissalDateTime?: Date;

    constructor(data?: IDismissFromMemberStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberStatusId = _data["memberStatusId"];
            this.personId = _data["personId"];
            this.dismissalDateTime = _data["dismissalDateTime"] ? new Date(_data["dismissalDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DismissFromMemberStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DismissFromMemberStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberStatusId"] = this.memberStatusId;
        data["personId"] = this.personId;
        data["dismissalDateTime"] = this.dismissalDateTime ? this.dismissalDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDismissFromMemberStatusCommand {
    memberStatusId?: number;
    personId?: number;
    dismissalDateTime?: Date;
}

export class PeopleVm implements IPeopleVm {
    people?: PersonLookupDto[] | undefined;

    constructor(data?: IPeopleVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(PersonLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleVm {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleVm {
    people?: PersonLookupDto[] | undefined;
}

export class PersonLookupDto implements IPersonLookupDto {
    id?: string | undefined;
    fistName?: string | undefined;
    surname?: string | undefined;

    constructor(data?: IPersonLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fistName = _data["fistName"];
            this.surname = _data["surname"];
        }
    }

    static fromJS(data: any): PersonLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fistName"] = this.fistName;
        data["surname"] = this.surname;
        return data; 
    }
}

export interface IPersonLookupDto {
    id?: string | undefined;
    fistName?: string | undefined;
    surname?: string | undefined;
}

export class PeopleWithBasicInfoVm implements IPeopleWithBasicInfoVm {
    people?: PersonWithBasicInfoLookupDto[] | undefined;

    constructor(data?: IPeopleWithBasicInfoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(PersonWithBasicInfoLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleWithBasicInfoVm {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleWithBasicInfoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleWithBasicInfoVm {
    people?: PersonWithBasicInfoLookupDto[] | undefined;
}

export class PersonWithBasicInfoLookupDto implements IPersonWithBasicInfoLookupDto {
    id?: number;
    fistName?: string | undefined;
    surname?: string | undefined;
    currentPositions?: SimplePositionDto[] | undefined;
    currentCareerLevel?: string | undefined;
    currentMemberStatus?: string | undefined;

    constructor(data?: IPersonWithBasicInfoLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fistName = _data["fistName"];
            this.surname = _data["surname"];
            if (Array.isArray(_data["currentPositions"])) {
                this.currentPositions = [] as any;
                for (let item of _data["currentPositions"])
                    this.currentPositions!.push(SimplePositionDto.fromJS(item));
            }
            this.currentCareerLevel = _data["currentCareerLevel"];
            this.currentMemberStatus = _data["currentMemberStatus"];
        }
    }

    static fromJS(data: any): PersonWithBasicInfoLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonWithBasicInfoLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fistName"] = this.fistName;
        data["surname"] = this.surname;
        if (Array.isArray(this.currentPositions)) {
            data["currentPositions"] = [];
            for (let item of this.currentPositions)
                data["currentPositions"].push(item.toJSON());
        }
        data["currentCareerLevel"] = this.currentCareerLevel;
        data["currentMemberStatus"] = this.currentMemberStatus;
        return data; 
    }
}

export interface IPersonWithBasicInfoLookupDto {
    id?: number;
    fistName?: string | undefined;
    surname?: string | undefined;
    currentPositions?: SimplePositionDto[] | undefined;
    currentCareerLevel?: string | undefined;
    currentMemberStatus?: string | undefined;
}

export class SimplePositionDto implements ISimplePositionDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;

    constructor(data?: ISimplePositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
        }
    }

    static fromJS(data: any): SimplePositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimplePositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface ISimplePositionDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
}

export class CareerLevelAssignmentDto implements ICareerLevelAssignmentDto {
    personCareerLevelId?: number;
    careerLevelId?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: ICareerLevelAssignmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personCareerLevelId = _data["personCareerLevelId"];
            this.careerLevelId = _data["careerLevelId"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.isActive = _data["isActive"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CareerLevelAssignmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CareerLevelAssignmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personCareerLevelId"] = this.personCareerLevelId;
        data["careerLevelId"] = this.careerLevelId;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICareerLevelAssignmentDto {
    personCareerLevelId?: number;
    careerLevelId?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class PersonDetailVm implements IPersonDetailVm {
    id?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;
    careerLevels?: PersonCareerLevelVm[] | undefined;
    memberStatus?: PersonMemberStatusVm[] | undefined;
    positions?: PersonPositionVm[] | undefined;

    constructor(data?: IPersonDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.emailPrivate = _data["emailPrivate"];
            this.emailAssociaton = _data["emailAssociaton"];
            this.mobilePrivate = _data["mobilePrivate"];
            this.adressStreet = _data["adressStreet"];
            this.adressNo = _data["adressNo"];
            this.adressZIP = _data["adressZIP"];
            this.adressCity = _data["adressCity"];
            if (Array.isArray(_data["careerLevels"])) {
                this.careerLevels = [] as any;
                for (let item of _data["careerLevels"])
                    this.careerLevels!.push(PersonCareerLevelVm.fromJS(item));
            }
            if (Array.isArray(_data["memberStatus"])) {
                this.memberStatus = [] as any;
                for (let item of _data["memberStatus"])
                    this.memberStatus!.push(PersonMemberStatusVm.fromJS(item));
            }
            if (Array.isArray(_data["positions"])) {
                this.positions = [] as any;
                for (let item of _data["positions"])
                    this.positions!.push(PersonPositionVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["emailPrivate"] = this.emailPrivate;
        data["emailAssociaton"] = this.emailAssociaton;
        data["mobilePrivate"] = this.mobilePrivate;
        data["adressStreet"] = this.adressStreet;
        data["adressNo"] = this.adressNo;
        data["adressZIP"] = this.adressZIP;
        data["adressCity"] = this.adressCity;
        if (Array.isArray(this.careerLevels)) {
            data["careerLevels"] = [];
            for (let item of this.careerLevels)
                data["careerLevels"].push(item.toJSON());
        }
        if (Array.isArray(this.memberStatus)) {
            data["memberStatus"] = [];
            for (let item of this.memberStatus)
                data["memberStatus"].push(item.toJSON());
        }
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPersonDetailVm {
    id?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;
    careerLevels?: PersonCareerLevelVm[] | undefined;
    memberStatus?: PersonMemberStatusVm[] | undefined;
    positions?: PersonPositionVm[] | undefined;
}

export enum Gender {
    MALE = 0,
    FEMALE = 1,
    DIVERS = 2,
}

export class PersonCareerLevelVm implements IPersonCareerLevelVm {
    id?: number;
    careerLevelId?: number;
    careerLevelName?: string | undefined;
    careerLevelShortName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: IPersonCareerLevelVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.careerLevelId = _data["careerLevelId"];
            this.careerLevelName = _data["careerLevelName"];
            this.careerLevelShortName = _data["careerLevelShortName"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonCareerLevelVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonCareerLevelVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["careerLevelId"] = this.careerLevelId;
        data["careerLevelName"] = this.careerLevelName;
        data["careerLevelShortName"] = this.careerLevelShortName;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPersonCareerLevelVm {
    id?: number;
    careerLevelId?: number;
    careerLevelName?: string | undefined;
    careerLevelShortName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class PersonMemberStatusVm implements IPersonMemberStatusVm {
    id?: number;
    memberStatusId?: number;
    memberStatusName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: IPersonMemberStatusVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.memberStatusId = _data["memberStatusId"];
            this.memberStatusName = _data["memberStatusName"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonMemberStatusVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonMemberStatusVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["memberStatusId"] = this.memberStatusId;
        data["memberStatusName"] = this.memberStatusName;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPersonMemberStatusVm {
    id?: number;
    memberStatusId?: number;
    memberStatusName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class PersonPositionVm implements IPersonPositionVm {
    id?: number;
    positionId?: number;
    positionName?: string | undefined;
    positionShortName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: IPersonPositionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.positionId = _data["positionId"];
            this.positionName = _data["positionName"];
            this.positionShortName = _data["positionShortName"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPositionVm {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPositionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["positionId"] = this.positionId;
        data["positionName"] = this.positionName;
        data["positionShortName"] = this.positionShortName;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPersonPositionVm {
    id?: number;
    positionId?: number;
    positionName?: string | undefined;
    positionShortName?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class CreatePersonCommand implements ICreatePersonCommand {
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;
    initialCareerLevelId?: number | undefined;
    initialMemberStatusId?: number | undefined;
    joinDate?: Date | undefined;

    constructor(data?: ICreatePersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.emailPrivate = _data["emailPrivate"];
            this.emailAssociaton = _data["emailAssociaton"];
            this.mobilePrivate = _data["mobilePrivate"];
            this.adressStreet = _data["adressStreet"];
            this.adressNo = _data["adressNo"];
            this.adressZIP = _data["adressZIP"];
            this.adressCity = _data["adressCity"];
            this.initialCareerLevelId = _data["initialCareerLevelId"];
            this.initialMemberStatusId = _data["initialMemberStatusId"];
            this.joinDate = _data["joinDate"] ? new Date(_data["joinDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreatePersonCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePersonCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["emailPrivate"] = this.emailPrivate;
        data["emailAssociaton"] = this.emailAssociaton;
        data["mobilePrivate"] = this.mobilePrivate;
        data["adressStreet"] = this.adressStreet;
        data["adressNo"] = this.adressNo;
        data["adressZIP"] = this.adressZIP;
        data["adressCity"] = this.adressCity;
        data["initialCareerLevelId"] = this.initialCareerLevelId;
        data["initialMemberStatusId"] = this.initialMemberStatusId;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreatePersonCommand {
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;
    initialCareerLevelId?: number | undefined;
    initialMemberStatusId?: number | undefined;
    joinDate?: Date | undefined;
}

export class UpdatePersonCommand implements IUpdatePersonCommand {
    id?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;

    constructor(data?: IUpdatePersonCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.emailPrivate = _data["emailPrivate"];
            this.emailAssociaton = _data["emailAssociaton"];
            this.mobilePrivate = _data["mobilePrivate"];
            this.adressStreet = _data["adressStreet"];
            this.adressNo = _data["adressNo"];
            this.adressZIP = _data["adressZIP"];
            this.adressCity = _data["adressCity"];
        }
    }

    static fromJS(data: any): UpdatePersonCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePersonCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["emailPrivate"] = this.emailPrivate;
        data["emailAssociaton"] = this.emailAssociaton;
        data["mobilePrivate"] = this.mobilePrivate;
        data["adressStreet"] = this.adressStreet;
        data["adressNo"] = this.adressNo;
        data["adressZIP"] = this.adressZIP;
        data["adressCity"] = this.adressCity;
        return data; 
    }
}

export interface IUpdatePersonCommand {
    id?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    birthdate?: Date;
    gender?: Gender;
    emailPrivate?: string | undefined;
    emailAssociaton?: string | undefined;
    mobilePrivate?: string | undefined;
    adressStreet?: string | undefined;
    adressNo?: string | undefined;
    adressZIP?: string | undefined;
    adressCity?: string | undefined;
}

export class PositionsVm implements IPositionsVm {
    positions?: PositionLookupDto[] | undefined;

    constructor(data?: IPositionsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["positions"])) {
                this.positions = [] as any;
                for (let item of _data["positions"])
                    this.positions!.push(PositionLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PositionsVm {
        data = typeof data === 'object' ? data : {};
        let result = new PositionsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPositionsVm {
    positions?: PositionLookupDto[] | undefined;
}

export class PositionLookupDto implements IPositionLookupDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    countAssignees?: number;

    constructor(data?: IPositionLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.isActive = _data["isActive"];
            this.countAssignees = _data["countAssignees"];
        }
    }

    static fromJS(data: any): PositionLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        data["countAssignees"] = this.countAssignees;
        return data; 
    }
}

export interface IPositionLookupDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    countAssignees?: number;
}

export class PositionDto implements IPositionDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    assignees?: PositionAssignee[] | undefined;

    constructor(data?: IPositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(PositionAssignee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPositionDto {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    isActive?: boolean;
    assignees?: PositionAssignee[] | undefined;
}

export class PositionAssignee implements IPositionAssignee {
    id?: number;
    personId?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;

    constructor(data?: IPositionAssignee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.personId = _data["personId"];
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.beginDateTime = _data["beginDateTime"] ? new Date(_data["beginDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PositionAssignee {
        data = typeof data === 'object' ? data : {};
        let result = new PositionAssignee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["personId"] = this.personId;
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["beginDateTime"] = this.beginDateTime ? this.beginDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPositionAssignee {
    id?: number;
    personId?: number;
    firstName?: string | undefined;
    surname?: string | undefined;
    beginDateTime?: Date;
    endDateTime?: Date | undefined;
}

export class PositionsWAVm implements IPositionsWAVm {
    positions?: PositionDto[] | undefined;

    constructor(data?: IPositionsWAVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["positions"])) {
                this.positions = [] as any;
                for (let item of _data["positions"])
                    this.positions!.push(PositionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PositionsWAVm {
        data = typeof data === 'object' ? data : {};
        let result = new PositionsWAVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPositionsWAVm {
    positions?: PositionDto[] | undefined;
}

export class PositionsHistoryVm implements IPositionsHistoryVm {
    id?: number;
    name?: string | undefined;
    assignees?: AssigneeDto[] | undefined;

    constructor(data?: IPositionsHistoryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["assignees"])) {
                this.assignees = [] as any;
                for (let item of _data["assignees"])
                    this.assignees!.push(AssigneeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PositionsHistoryVm {
        data = typeof data === 'object' ? data : {};
        let result = new PositionsHistoryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.assignees)) {
            data["assignees"] = [];
            for (let item of this.assignees)
                data["assignees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPositionsHistoryVm {
    id?: number;
    name?: string | undefined;
    assignees?: AssigneeDto[] | undefined;
}

export class PeopleAssignSuggestions3 implements IPeopleAssignSuggestions3 {
    suggestions?: PeopleAssignSuggestion3[] | undefined;

    constructor(data?: IPeopleAssignSuggestions3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of _data["suggestions"])
                    this.suggestions!.push(PeopleAssignSuggestion3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleAssignSuggestions3 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestions3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleAssignSuggestions3 {
    suggestions?: PeopleAssignSuggestion3[] | undefined;
}

export class PeopleAssignSuggestion3 implements IPeopleAssignSuggestion3 {
    name?: string | undefined;
    id?: number;

    constructor(data?: IPeopleAssignSuggestion3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PeopleAssignSuggestion3 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleAssignSuggestion3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPeopleAssignSuggestion3 {
    name?: string | undefined;
    id?: number;
}

export class PeopleDismissSuggestions2 implements IPeopleDismissSuggestions2 {
    suggestions?: PeopleDismissSuggestion2[] | undefined;

    constructor(data?: IPeopleDismissSuggestions2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of _data["suggestions"])
                    this.suggestions!.push(PeopleDismissSuggestion2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PeopleDismissSuggestions2 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleDismissSuggestions2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPeopleDismissSuggestions2 {
    suggestions?: PeopleDismissSuggestion2[] | undefined;
}

export class PeopleDismissSuggestion2 implements IPeopleDismissSuggestion2 {
    id?: number;
    name?: string | undefined;

    constructor(data?: IPeopleDismissSuggestion2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PeopleDismissSuggestion2 {
        data = typeof data === 'object' ? data : {};
        let result = new PeopleDismissSuggestion2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPeopleDismissSuggestion2 {
    id?: number;
    name?: string | undefined;
}

export class CreatePositionCommand implements ICreatePositionCommand {
    name?: string | undefined;
    shortName?: string | undefined;

    constructor(data?: ICreatePositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
        }
    }

    static fromJS(data: any): CreatePositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface ICreatePositionCommand {
    name?: string | undefined;
    shortName?: string | undefined;
}

export class UpdatePositionCommand implements IUpdatePositionCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;

    constructor(data?: IUpdatePositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
        }
    }

    static fromJS(data: any): UpdatePositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface IUpdatePositionCommand {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
}

export class DeactivatePositionCommand implements IDeactivatePositionCommand {
    id?: number;
    endDateTime?: Date;

    constructor(data?: IDeactivatePositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeactivatePositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeactivatePositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDeactivatePositionCommand {
    id?: number;
    endDateTime?: Date;
}

export class ReactivatePositionCommand implements IReactivatePositionCommand {
    id?: number;

    constructor(data?: IReactivatePositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ReactivatePositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ReactivatePositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IReactivatePositionCommand {
    id?: number;
}

export class AssignToPositionCommand implements IAssignToPositionCommand {
    positionId?: number;
    personId?: number;
    assignmentDateTime?: Date;
    dismissalDateTime?: Date | undefined;

    constructor(data?: IAssignToPositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.positionId = _data["positionId"];
            this.personId = _data["personId"];
            this.assignmentDateTime = _data["assignmentDateTime"] ? new Date(_data["assignmentDateTime"].toString()) : <any>undefined;
            this.dismissalDateTime = _data["dismissalDateTime"] ? new Date(_data["dismissalDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssignToPositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AssignToPositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positionId"] = this.positionId;
        data["personId"] = this.personId;
        data["assignmentDateTime"] = this.assignmentDateTime ? this.assignmentDateTime.toISOString() : <any>undefined;
        data["dismissalDateTime"] = this.dismissalDateTime ? this.dismissalDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAssignToPositionCommand {
    positionId?: number;
    personId?: number;
    assignmentDateTime?: Date;
    dismissalDateTime?: Date | undefined;
}

export class DismissFromPositionCommand implements IDismissFromPositionCommand {
    positionId?: number;
    personId?: number;
    dismissalDateTime?: Date;

    constructor(data?: IDismissFromPositionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.positionId = _data["positionId"];
            this.personId = _data["personId"];
            this.dismissalDateTime = _data["dismissalDateTime"] ? new Date(_data["dismissalDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DismissFromPositionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DismissFromPositionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positionId"] = this.positionId;
        data["personId"] = this.personId;
        data["dismissalDateTime"] = this.dismissalDateTime ? this.dismissalDateTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDismissFromPositionCommand {
    positionId?: number;
    personId?: number;
    dismissalDateTime?: Date;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}